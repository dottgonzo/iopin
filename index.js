"use strict";
var child_process = require('child_process');
var Promise = require('bluebird');
var exec = child_process.exec;
var Relaypin = (function () {
    function Relaypin(confpin) {
        this.tags = [];
        if (!confpin.pin || (confpin.cmdopen && confpin.cmdclose)) {
            throw Error("no pin number provided");
        }
        else {
            var that_1 = this;
            if (confpin.pin)
                that_1.pin = confpin.pin;
            if (confpin.name)
                that_1.name = confpin.name;
            if (confpin.serial) {
                that_1.serial = confpin.serial;
            }
            else {
                that_1.serial = false;
            }
            if (confpin.status) {
                that_1.status = confpin.status;
            }
            else {
                that_1.status = that_1.normally;
            }
            if (confpin.normally) {
                that_1.normally = confpin.normally;
            }
            else {
                that_1.normally = "open";
            }
            if (confpin.tags) {
                for (var i = 0; i < confpin.tags.length; i++) {
                    that_1.tags.push(confpin.tags[i]);
                }
            }
            if (confpin.cmdopen) {
                that_1.cmdopen = confpin.cmdopen;
            }
            else {
                that_1.cmdopen = function () {
                    return new Promise(function (resolve, reject) {
                        exec('echo 1 > /sys/class/gpio/gpio' + that_1.pin + '/value', function (err, stout, stderr) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                that_1.status = 'open';
                                var a = {
                                    status: that_1.status
                                };
                                if (that_1.serial)
                                    a.serial = that_1.serial;
                                if (that_1.name)
                                    a.name = that_1.name;
                                resolve(a);
                            }
                        });
                    });
                };
            }
            if (confpin.cmdclose) {
                that_1.cmdclose = confpin.cmdclose;
            }
            else {
                that_1.cmdclose = function () {
                    return new Promise(function (resolve, reject) {
                        exec('echo 0 > /sys/class/gpio/gpio' + that_1.pin + '/value', function (err, stout, stderr) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                that_1.status = 'close';
                                var a = {
                                    status: that_1.status
                                };
                                if (that_1.serial)
                                    a.serial = that_1.serial;
                                if (that_1.name)
                                    a.name = that_1.name;
                                resolve(a);
                            }
                        });
                    });
                };
            }
        }
    }
    Relaypin.prototype.switch = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status) {
                that.switchclose().then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
            else {
                that.switchopen().then(function (a) {
                    resolve(a);
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Relaypin.prototype.switchopen = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status === 'close') {
                that.cmdopen().then(function (a) {
                    for (var i = 0; i < that.onopen.length; i++) {
                        that.onopen[i];
                        resolve(a);
                    }
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Relaypin.prototype.switchclose = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status === 'close') {
                that.cmdclose().then(function (a) {
                    for (var i = 0; i < that.onclose.length; i++) {
                        that.onclose[i];
                        resolve(a);
                    }
                }).catch(function (err) {
                    reject(err);
                });
            }
        });
    };
    Relaypin.prototype.on = function (value, cmd) {
        if (cmd) {
            if (value === 'close') {
                this.onclose.push(cmd);
            }
            else if (value === 'open') {
                this.onopen.push(cmd);
            }
            else if (value === 'switch') {
                this.switches.push(cmd);
            }
            else {
                throw Error("no pin number provided");
            }
        }
        else {
            throw Error("no pin number provided");
        }
    };
    return Relaypin;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Relaypin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
