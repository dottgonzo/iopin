"use strict";
var child_process = require('child_process');
var Promise = require('bluebird');
var exec = child_process.exec;
var Relaypin = (function () {
    function Relaypin(confpin) {
        if (!confpin.pin) {
            throw Error("no pin number provided");
        }
        else {
            var that_1 = this;
            that_1.pin = confpin.pin;
            if (confpin.normally) {
                that_1.normally = confpin.normally;
            }
            else {
                that_1.normally = "open";
            }
            if (confpin.status) {
                that_1.status;
            }
            else {
                that_1.status = that_1.normally;
            }
            if (confpin.cmdopen) {
                that_1.cmdopen = confpin.cmdopen;
            }
            else {
                that_1.cmdopen = function () {
                    return new Promise(function (resolve, reject) {
                        exec('echo 1 > /sys/class/gpio/gpio' + that_1.pin + '/value', function (err, stout, stderr) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                status = 'open';
                                resolve(true);
                            }
                        });
                    });
                };
            }
            if (confpin.cmdclose) {
                that_1.cmdclose = confpin.cmdclose;
            }
            else {
                that_1.cmdclose = function () {
                    return new Promise(function (resolve, reject) {
                        exec('echo 0 > /sys/class/gpio/gpio' + that_1.pin + '/value', function (err, stout, stderr) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                status = 'closed';
                                resolve(true);
                            }
                        });
                    });
                };
            }
        }
    }
    Relaypin.prototype.switch = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status) {
                that.switchclose();
            }
            else {
                that.switchopen();
            }
        });
    };
    Relaypin.prototype.switchopen = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status === 'close') {
                that.cmdopen().then(function () {
                    for (var i = 0; i < that.onopen.length; i++) {
                        that.onopen[i];
                    }
                }).catch(function (err) {
                    console.log(err);
                });
            }
        });
    };
    Relaypin.prototype.switchclose = function () {
        var that = this;
        return new Promise(function (resolve, reject) {
            if (that.status === 'close') {
                that.cmdclose().then(function () {
                    for (var i = 0; i < that.onclose.length; i++) {
                        that.onclose[i];
                    }
                }).catch(function (err) {
                    console.log(err);
                });
            }
        });
    };
    Relaypin.prototype.on = function (value, cmd) {
        if (cmd) {
            if (value === 'close') {
                this.onclose.push(cmd);
            }
            else if (value === 'open') {
                this.onopen.push(cmd);
            }
            else if (value === 'switch') {
                this.switches.push(cmd);
            }
            else {
                throw Error("no pin number provided");
            }
        }
        else {
            throw Error("no pin number provided");
        }
    };
    return Relaypin;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Relaypin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
